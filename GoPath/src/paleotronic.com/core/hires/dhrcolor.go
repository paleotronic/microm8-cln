package hires

import (
	"paleotronic.com/core/memory"
	"paleotronic.com/core/settings"
)

var DHGRColorTable [16][16][16]uint16

var a2DHGRFrom = [16][16]uint16{
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
	{0x0000, 0x1110, 0x0000, 0x1110, 0x0000, 0x1110, 0x0000, 0x1110, 0x0000, 0x1110, 0x0000, 0x1110, 0x0000, 0x1110, 0x0000, 0x1110},
	{0x0000, 0x3300, 0x2200, 0x3300, 0x0000, 0x3300, 0x2200, 0x3300, 0x0000, 0x3300, 0x2200, 0x3300, 0x0000, 0x3300, 0x2200, 0x3300},
	{0x0000, 0x3300, 0x2200, 0x3300, 0x0000, 0x3300, 0x2200, 0x3300, 0x0000, 0x3300, 0x2200, 0x3300, 0x0000, 0x3300, 0x2200, 0x3300},
	{0x0400, 0x5500, 0x6400, 0x7500, 0x4400, 0x5500, 0x6400, 0x7500, 0x0400, 0x5500, 0x6400, 0x7500, 0x4400, 0x5500, 0x6400, 0x7500},
	{0x0500, 0x5500, 0x6500, 0x7500, 0x4500, 0x5500, 0x6500, 0x7500, 0x0500, 0x5500, 0x6500, 0x7500, 0x4500, 0x5500, 0x6500, 0x7500},
	{0x0600, 0x7700, 0x6600, 0x7700, 0x4600, 0x7700, 0x6600, 0x7700, 0x0600, 0x7700, 0x6600, 0x7700, 0x4600, 0x7700, 0x6600, 0x7700},
	{0x0700, 0x7700, 0x6700, 0x7700, 0x4700, 0x7700, 0x6700, 0x7700, 0x0700, 0x7700, 0x6700, 0x7700, 0x4700, 0x7700, 0x6700, 0x7700},
	{0x8000, 0x9000, 0xA000, 0xB000, 0x8000, 0x9000, 0xA000, 0xB000, 0x8000, 0x9000, 0xA000, 0xB000, 0x8000, 0x9000, 0xA000, 0xB000},
	{0x8990, 0x9990, 0xA990, 0xB990, 0x8990, 0x9990, 0xA990, 0xB990, 0x8990, 0x9990, 0xA990, 0xB990, 0x8990, 0x9990, 0xA990, 0xB990},
	{0xAAA0, 0xBBA0, 0xAAA0, 0xBBA0, 0xAAA0, 0xBBA0, 0xAAA0, 0xBBA0, 0xAAA0, 0xBBA0, 0xAAA0, 0xBBA0, 0xAAA0, 0xBBA0, 0xAAA0, 0xBBA0},
	{0xABB0, 0xBBB0, 0xABB0, 0xBBB0, 0xABB0, 0xBBB0, 0xABB0, 0xBBB0, 0xABB0, 0xBBB0, 0xABB0, 0xBBB0, 0xABB0, 0xBBB0, 0xABB0, 0xBBB0},
	{0xCC00, 0xDD00, 0xEC00, 0xFD00, 0xCC00, 0xDD00, 0xEC00, 0xFD00, 0xCC00, 0xDD00, 0xEC00, 0xFD00, 0xCC00, 0xDD00, 0xEC00, 0xFD00},
	{0xCDD0, 0xDDD0, 0xEDD0, 0xFDD0, 0xCDD0, 0xDDD0, 0xEDD0, 0xFDD0, 0xCDD0, 0xDDD0, 0xEDD0, 0xFDD0, 0xCDD0, 0xDDD0, 0xEDD0, 0xFDD0},
	{0xEEE0, 0xFFE0, 0xEEE0, 0xFFE0, 0xEEE0, 0xFFE0, 0xEEE0, 0xFFE0, 0xEEE0, 0xFFE0, 0xEEE0, 0xFFE0, 0xEEE0, 0xFFE0, 0xEEE0, 0xFFE0},
	{0xEFF0, 0xFFF0, 0xEFF0, 0xFFF0, 0xEFF0, 0xFFF0, 0xEFF0, 0xFFF0, 0xEFF0, 0xFFF0, 0xEFF0, 0xFFF0, 0xEFF0, 0xFFF0, 0xEFF0, 0xFFF0},
}

var a2DHGRTo = [16][16]uint16{
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
	{0x0001, 0x0001, 0x0001, 0x0001, 0x0005, 0x0005, 0x0005, 0x0005, 0x0009, 0x0009, 0x0009, 0x0009, 0x000D, 0x000D, 0x000D, 0x000D},
	{0x0020, 0x0020, 0x0022, 0x0022, 0x0026, 0x0026, 0x0026, 0x0026, 0x00AA, 0x00AA, 0x00AA, 0x00AA, 0x00AE, 0x00AE, 0x00AE, 0x00AE},
	{0x0033, 0x0033, 0x0033, 0x0033, 0x0037, 0x0037, 0x0037, 0x0037, 0x00BB, 0x00BB, 0x00BB, 0x00BB, 0x00BF, 0x00BF, 0x00BF, 0x00BF},
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0044, 0x0044, 0x0044, 0x0044, 0x00CC, 0x00CC, 0x00CC, 0x00CC, 0x00CC, 0x00CC, 0x00CC, 0x00CC},
	{0x0055, 0x0055, 0x0055, 0x0055, 0x0055, 0x0055, 0x0055, 0x0055, 0x00DD, 0x00DD, 0x00DD, 0x00DD, 0x00DD, 0x00DD, 0x00DD, 0x00DD},
	{0x0060, 0x0060, 0x0062, 0x0062, 0x0066, 0x0066, 0x0066, 0x0066, 0x00EE, 0x00EE, 0x00EE, 0x00EE, 0x00EE, 0x00EE, 0x00EE, 0x00EE},
	{0x0077, 0x0077, 0x0077, 0x0077, 0x0077, 0x0077, 0x0077, 0x0077, 0x00FF, 0x00FF, 0x00FF, 0x00FF, 0x00FF, 0x00FF, 0x00FF, 0x00FF},
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0888, 0x0888, 0x0888, 0x0888, 0x0888, 0x0888, 0x0888, 0x0888},
	{0x0001, 0x0001, 0x0001, 0x0001, 0x0005, 0x0005, 0x0005, 0x0005, 0x0009, 0x0009, 0x0009, 0x0009, 0x000D, 0x000D, 0x000D, 0x000D},
	{0x0000, 0x0000, 0x0002, 0x0002, 0x0006, 0x0006, 0x0006, 0x0006, 0x000A, 0x000A, 0x000A, 0x000A, 0x000E, 0x000E, 0x000E, 0x000E},
	{0x0003, 0x0003, 0x0003, 0x0003, 0x0007, 0x0007, 0x0007, 0x0007, 0x000B, 0x000B, 0x000B, 0x000B, 0x000F, 0x000F, 0x000F, 0x000F},
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0044, 0x0044, 0x0044, 0x0044, 0x00CC, 0x00CC, 0x00CC, 0x00CC, 0x00CC, 0x00CC, 0x00CC, 0x00CC},
	{0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x000D, 0x000D, 0x000D, 0x000D, 0x000D, 0x000D, 0x000D, 0x000D},
	{0x0000, 0x0000, 0x0002, 0x0002, 0x0006, 0x0006, 0x0006, 0x0006, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E, 0x000E},
	{0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x000F, 0x000F, 0x000F, 0x000F, 0x000F, 0x000F, 0x000F, 0x000F},
}

func init() {
	for iFrom := 0; iFrom < 16; iFrom++ {
		for iCurrent := 0; iCurrent < 16; iCurrent++ {
			for iTo := 0; iTo < 16; iTo++ {
				DHGRColorTable[iFrom][iCurrent][iTo] = a2DHGRFrom[iCurrent][iFrom] | a2DHGRTo[iCurrent][iTo]
			}
		}
	}
}

func (hgr *DHGRScreen) ColorsForScanLine(b []uint64, mono bool) []int {

	index := hgr.Data.GStart[0] / memory.OCTALYZER_INTERPRETER_SIZE

	line := make([]int, 560)

	var rbval int

	var monobits bool

	bitcols := []int{DHR_BLACK, DHR_WHITE}

	var useColor = make([]bool, len(b))
	var mixed = (settings.DHGRHighBit[index] == settings.DHB_MIXED_AUTO && settings.DHGRMode3Detected[index]) || (settings.DHGRHighBit[index] == settings.DHB_MIXED_ON)

	for i, v := range b {
		useColor[i] = (v & 0x80) != 0
	}

	var bitpatterns [140]int
	var bitmono [140]bool
	var bitindex int

	for j, abyte := range b {
		monobits = mono || (mixed && !useColor[j])
		for k := 0; k < 7; k++ {
			x := j*7 + k
			abit := int(abyte & 0x01)
			rbval = ((rbval << 1) & 0xf) | abit
			abyte = abyte >> 1
			if x%4 == 3 {
				bitpatterns[bitindex] = rbval
				bitmono[bitindex] = monobits
				bitindex++
			}
		}
	}

	var prev, next int
	for i, current := range bitpatterns {
		x := 4 * i
		if bitmono[i] {
			for xx := 3; xx >= 0; xx-- {
				line[x+xx] = bitcols[current&1]
				current >>= 1
			}
		} else {
			if i < len(bitpatterns)-1 {
				next = bitpatterns[i+1]
			} else {
				next = 0
			}
			if i > 0 {
				prev = bitpatterns[i-1]
			} else {
				prev = 0
			}
			bp := DHGRColorTable[prev][current][next]
			line[x+0] = DHGRPaletteToLores[int(bp>>12)&0xf]
			line[x+1] = DHGRPaletteToLores[int(bp>>8)&0xf]
			line[x+2] = DHGRPaletteToLores[int(bp>>4)&0xf]
			line[x+3] = DHGRPaletteToLores[int(bp)&0xf]
			// line[x+0] = int(bp>>12) & 0xf
			// line[x+1] = int(bp>>8) & 0xf
			// line[x+2] = int(bp>>4) & 0xf
			// line[x+3] = int(bp) & 0xf
		}
	}

	return line

}
